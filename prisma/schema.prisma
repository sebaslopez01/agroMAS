// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SELLER
  BUYER
}

enum DocumentType {
  CC
  CE
  PP
}

enum PaymentState {
  COMPLETED
  WAITING
  CANCELLED
}

enum Measure {
  KG
  LB
  UND
}

model Product {
  id            String    @id @default(cuid())
  name          String    @db.VarChar(60)
  price         Float
  measure       Measure   @default(KG)
  quantity      Float
  quantitySold  Int       @default(0) @map("quantity_sold")
  discountPrice Float?    @map("discount_price")
  description   String    @db.VarChar(250)
  city          String    @db.VarChar(60)
  state         String    @db.VarChar(60)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  sellerId      String    @map("seller_id")
  seller        Seller    @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  purchaseId    String?   @map("purchase_id")
  purchase      Purchase? @relation(fields: [purchaseId], references: [id], onDelete: SetNull)

  @@map("products")
}

model Purchase {
  id           String       @id @default(cuid())
  paymentId    String       @map("payment_id")
  referenceId  String       @map("reference_id") @db.VarChar(25)
  products     Product[]
  paymentValue Float        @map("payment_value")
  paymentState PaymentState @map("payment_state")
  createdAt    DateTime     @default(now()) @map("created_at")
  buyerId      String?      @map("buyer_id")
  buyer        Buyer?       @relation(fields: [buyerId], references: [id], onDelete: SetNull)

  @@map("purchases")
}

model Seller {
  id          String       @id @default(cuid())
  sellCity    String       @map("sell_city")
  address     String
  products    Product[]
  investments Investment[]
  userId      String       @unique @map("user_id")
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sellers")
}

model Buyer {
  id          String                @id @default(cuid())
  purchases   Purchase[]
  userId      String                @unique @map("user_id")
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  investments BuyersOnInvestments[]

  @@map("buyers")
}

model User {
  id             String       @id @default(cuid())
  firstName      String       @map("first_name") @db.VarChar(60)
  lastName       String       @map("last_name") @db.VarChar(60)
  documentType   DocumentType @map("document_type")
  documentNumber String       @map("document_number") @db.VarChar(20)
  city           String       @db.VarChar(60)
  state          String       @db.VarChar(60)
  phone          String?      @db.VarChar(20)
  terms          Boolean      @default(false)
  email          String       @unique @db.VarChar(80)
  password       String       @db.VarChar(255)
  isActive       Boolean      @default(false) @map("is_active")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  image          String?
  role           Role
  buyer          Buyer?
  seller         Seller?

  @@map("users")
}

model Investment {
  id               String                @id @default(cuid())
  title            String                @db.VarChar(60)
  investmentTarget Float                 @map("investment_target")
  invested         Float                 @default(0.0)
  startDate        DateTime              @map("start_date")
  city             String                @db.VarChar(60)
  state            String                @db.VarChar(60)
  image            String
  photos           String[]              @default([])
  videos           String[]              @default([])
  description      String                @db.VarChar(1000)
  shortDescription String                @map("short_description") @db.VarChar(200)
  isActive         Boolean               @default(true) @map("is_active")
  isCompleted      Boolean               @default(false) @map("is_completed")
  createdAt        DateTime              @default(now()) @map("created_at")
  updatedAt        DateTime              @updatedAt @map("updated_at")
  investors        BuyersOnInvestments[]
  sellerId         String                @map("seller_id")
  seller           Seller                @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@map("investments")
}

model BuyersOnInvestments {
  investmentId    String     @map("investment_id")
  investment      Investment @relation(fields: [investmentId], references: [id])
  buyerId         String     @map("buyer_id")
  buyer           Buyer      @relation(fields: [buyerId], references: [id])
  invested        Float
  investmentTerms Boolean    @default(false) @map("investment_terms")
  assignedAt      DateTime   @default(now()) @map("assigned_at")

  @@id([investmentId, buyerId])
  @@map("buyers_on_investments")
}
